                                                        01/08/2024:
                                                        -----------
-->We can change HTML elements by using JavaScript.for that we need to use one method which is "document.getElementById()"
for Ex:
        document.getElementById("demo").innerHTML = "Hello JavaScript";
here in the above last example we r finding the HTML element which is having id "demo" by using "document.getElementById" and by using innerHTML we r replacing HTML content in it.

-->We can use this method to
    1.to Change HTML elements
    2.to change HTML attributes
    3.to change HTML CSS.
-->Where can we write this Java Script code :
Java Script code will be written in "script" Tag either in <body> or <head> or as external file also.
for Ex:
       <script> Code can be written here </script>
-->There r few advantages if we write code in external file it will seperate HTML and Code.
-->Cached JavaScript files can speed up page loads
-->if we want to use multiple JavaScript files we need to use multiple Script tags.
 for Ex:
        <script sr="source1.js"></script>
        <scipt src="source2.js"></script>

Java Script Display Output methods :
------------------------------------
-->In JavaScript there r few methods to display output.They are :
      a. Writing into an HTML element, using innerHTML.
      b. Writing into the HTML output using document.write().
      c. Writing into an alert box, using window.alert().
      d. Writing into the browser console, using console.log().

-->Using innerHTML:
   To access an HTML element, JavaScript can use the document.getElementById(id) method.
   The id attribute defines the HTML element. The innerHTML property defines the HTML content to be changed.
   For Ex: document.getElementById("demo").innerHTML = "Hello JavaScript";

-->JavaScript Can Change HTML Attribute Values.

Where to write JavaScript :
---------------------------
               Javascript code is written in between script tags i.e.., <script>. We can write this script tag either in body or in head.we can also create an external file for this javascript code and we can call it in ou HTML code. we can write any nuber of scripts in a HTML document.
  Ex:
     <script>
            document.getElementById("demo").innerHTML = "My First JavaScript";
     </script>

                                                                 01/11/2024:
                                                                 -----------

JavaScript Functions and Events :
---------------------------------
JavaScript function is a block of code it will be executed when it is called by an events like click and dblclick etc..,.
Ex:
  <button type="button" onclick="myFunction()">Try it</button>

<script>
       function myFunction() {
       document.getElementById("demo").innerHTML = "Paragraph changed.";
       }
</script>

NOTE: Placing scripts at the bottom of the <body> element improves the display speed, because script interpretation slows down the display.
-----

External JavaScript :
---------------------
we can write javaScript code in an external file saved with an extension of .js .we can use this external file for multiple HTML documents.to call this file in our HTML code we need to use src attribute in script tag.
 Ex:
    <button type="button" onclick="myFunction()">Try it</button>

    <p>This example links to "myScript.js".</p>
    <p>(myFunction is stored in "myScript.js")</p>

    <script src="myScript.js"></script>

JavaScript OUTPUTS:
-------------------
to display output in javaScript we can use the following:
1.Writing into an HTML element, using innerHTML.
2.Writing into the HTML output using document.write().
3.Writing into an alert box, using window.alert().
4.Writing into the browser console, using console.log().

Using document.write():
-----------------------
This is used for testing purpose.
Calling document.write() when HTML is loaded will delete whole HTML content.
ex:
   <h1>My First Web Page</h1>
   <p>My first paragraph.</p>
   <button type="button" onclick="document.write(5 + 6)">Try it</button>

Using windows.alert():
----------------------
To display output in a alert box we can use this windows.alert();
Ex:
   <h1>My First Web Page</h1>
   <p>My first paragraph.</p>

   <script>
    window.alert(5 + 6);
   </script>

In JavaScript, the window object is the global scope object. This means that variables, properties, and methods by default belong to the window object. This also means that specifying the window keyword is optional.

Using console.log():
--------------------
This method is used for debugging purpose.Output will be displayed in browser console.
Ex:
  <script>
   console.log(5 + 6);
  </script>


JavaScript Print:
------------------
JavaScript does not have any print object or print methods.

You cannot access output devices from JavaScript.

The only exception is that you can call the window.print() method in the browser to print the content of the current window.
Ex:
   <button onclick="window.print()">Print this page</button>


                ----------------------*******************************************************----------------------------------------

JavaScript Statements:
----------------------
A computer program  is a set of instructions that to be executed by the computer.
In programming these instructions are called statements.
A JavaScript program is a list of programming statements.
Ex: 
   let x, y, z;    // Statement 1
   x = 5;          // Statement 2
   y = 6;          // Statement 3
   z = x + y;      // Statement 4

Javascript programs contains number of javascript statements. These statements executed one by one in a order.

NOTE:
----
In HTML, JavaScript programs are executed by the web browser.

Semicolons(;):
--------------
These semicolons seperates statements.
in javaScript these semicolon is not mandatory.

JavaScript WhiteSpaces:
-----------------------
Javascript ignores multiple spaces.we can use any number of spaces to make our code for better understanding.
Ex:
  The following lines are equivalent:
   let person = "Hege";
   let person="Hege";

maintaining spaces around operators is good practice  ( = + - * / )
Ex:
   let x + y = z;

line length and line breaks:
----------------------------
In programming if line length is more than 80 characters it is better to break the line at operators.
Ex:
    <script>
      document.getElementById("demo").innerHTML =
      "Hello Dolly!";
    </script>

Code Blocks:
------------
if we write group of statements together in between {} is code blocks.we can see this code bloks in functions.
Ex:
   function myFunction() {
     document.getElementById("demo1").innerHTML = "Hello Dolly!";
     document.getElementById("demo2").innerHTML = "How are you?";
   } 


Javascript Keywords:
--------------------
In Javascript every statement is often starts with a keyword to define what kind of action to be performed.
There are few keyword reserved in javascript .we shouldn't use this keywords as variable name.Few of the keywords are:
   var, let, const, function, return, if, switch, for, try.

                                                 01/12/2023:
                                                 -----------

Javascript syntax:
------------------
     Syntax is a set of rules to write a code.

How to create a variable..?
ans: 
     let x;
     let y;
How to use a variable..?
ans :
      let x;
      x=5;


JavaScript Values :
-------------------
JavaScript syntax is saying that there are two types of values:
1.Fixed values are called Literals.
2.Variable values are called Variables.

JavaScript Literals:
--------------------
Two most important rules for Literals are:
1.Numbers should be with or without decimal point.
Ex:
    let x, y;
    x = 10;
    y = 10.5;

2.Sring should be written in single or double quotes.
    let name;
    name = "mohan";
    name = 'mohan';

JavaScript Variables:
---------------------
These variables are used to store values of a data.
In JavaScript var, let, const are used to declare variables.

JavaScript Operators:
---------------------
JavaScript uses arithmetic operators ( + - * / ) to compute values.
Assignment(=) operator is used to assign values.

JavaScript Expressions:
------------------------
An expression is a combination of values, variables, and operators, which computes to a value.
The computation is called an evaluation.
For Ex:
       5 * 10 evaluates to 50:

JavaScript Keywords:
--------------------
These Keywords will tell what operation to be performed.
let and var are the key words will be used to create variable.

JavaScript Comments:
--------------------
Not all JavaScript statements are "executed".
Code after double slashes // or between /* and */ is treated as a comment.
Comments are ignored, and will not be executed:

JavaScript Identifiers:
--------------------
Identifiers are the names of variables, keywords and functions.
We need to follow few rules while writing this Identifiers.They are:
It should begin with either alphabets[A-Z or a-z] or underScore or "$".
Nubmbers are not allowed to begin a identifier.
We shouldn't use keyWords as Identifiers.
JavaScript is case sensitive.

JavaScript and Camel Case:
--------------------------
There are different ways to write a variable name.If that name is containing two word we need to joint those.for Joining some will use Underscore and some will use hyphen.
but actually we shouldn't use Hyphen(-) in Javascript Identifiers.
for Ex:
    first-name, last-name, master-card, inter-city.

NOTE: Hyphens are not allowed in JavaScript. They are reserved for subtractions.
-----

Better way to write Identifiers:
1.Underscore:
-------------
for Ex:
        first_name, last_name, master_card, inter_city.

2.Upper Camel Case (Pascal Case):
-------------------------------
for Ex:
        FirstName, LastName, MasterCard, InterCity.

3.Lower Camel Case: JavaScript programmers tend to use camel case that starts with a lowercase letter:
-------------------
for Ex:
       firstName, lastName, masterCard, interCity.

JavaScript Variables:
---------------------
Variable is a container used to store data. We can declare variables in four ways:
1.Automatically.
2.Using var keyword.
3.Using let keyword.
4.Using const keyword.

Ex:
   x =5;  (in this case x will be automatically declared when we started using it.)
   var x = 5;
   let x = 5;
   const x = 5;

NOTE:
-----
It is considered good programming practice to always declare variables before use.

"let" keyword is used when the value of variable is changing.
"const" keyword is used when the value of variable is doesn't change.
 
If a variable is declared with no value will have the value undefine.

When to Use var, let, or const?
1. Always declare variables
2. Always use const if the value should not be changed
3. Always use const if the type should not be changed (Arrays and Objects)
4. Only use let if you can't use const
5. Only use var if you MUST support old browsers.

JavaScript Data Types
JavaScript variables can hold numbers like 100 and text values like "John Doe".
In programming, text values are called text strings.
JavaScript can handle many types of data, but for now, just think of numbers and strings.
Strings are written inside double or single quotes. Numbers are written without quotes.
If you put a number in quotes, it will be treated as a text string.


JavaScript Let:
---------------
let keyword is introduced in ES6.
Variable with let keyword is block scope.
Variables with let keyword should declare before it use. We can not re-declare variable in same block.
Before ES6 there is no block scope variables in JavaScript. JavaScript had Global Scope and Function Scope.
ES6 introduced the two new JavaScript keywords: let and const which are block scoped.

Variables declare with var is of global scope and it can not have block scope.

Variables declared with var inside a { } block can be accessed from outside the block:
Ex:
   {
     var x = 2;
   }
   // x CAN be used here


Variable declared with "let" can not be re-declared. But Variable declared with "var" can be re-declared.
 Ex: 
   We can not do this.
    let x = "John Doe";
    let x = 0;

   We can do this :
   var x = "John Doe";
   var x = 0;

What is Good?
let and const have block scope.
let and const can not be redeclared.
let and const must be declared before use.
let and const does not bind to this.
let and const are not hoisted.

JavaScript Const:
-----------------
Variables decalared by Const will have fixed value with block scope.
This variables should declare first before using it.
We can not re-declare variables in the same block and also we can not re-assign the variable.
Ex:
  we should not re-assign the variable.
  const PI = 3.141592653589793;
  PI = 3.14;

NOTE:
-----
    JavaScript const variables must be assigned a value when they are declared.
Ex:
    const PI = 3.14159265359;


When to use "const":
--------------------
when we know the value of a variable which is not going to change we can use this const to declare a variable.
we can use this const for declaring:
 an array,
 an object,
 a function,
 a regExp.

Constant Objects and Arrays:
----------------------------
It does not define a constant value. It defines a constant reference to a value.
because of this we can NOT:
  Reassign a constant value.
  
 Reassign a constant array.
Ex:
   const cars = ["Saab", "Volvo", "BMW"];
   cars = ["Toyota", "Volvo", "Audi"];    // ERROR

Reassign a constant object.
Ex: 
  const car = {type:"Fiat", model:"500", color:"white"};
  car = {type:"Volvo", model:"EX60", color:"red"};    // ERROR

But you CAN:
  Change the elements of constant array.
Ex:
  // You can create a constant array:
       const cars = ["Saab", "Volvo", "BMW"];
  // You can change an element:
       cars[0] = "Toyota";
  // You can add an element:
       cars.push("Audi");

Change the properties of constant object.
Ex:
   // You can create a const object:
const car = {type:"Fiat", model:"500", color:"white"};
   // You can change a property:
car.color = "red";
   // You can add a property:
car.owner = "Johnson";


Hoisting :
variables defined with "var" are hoisted to the top and can be initialized at anytime.means we can use this variables before it's declaration.
Ex:
 x=10;
 var x;

Variables defined using "const" are hoisted top but not initialized.means we can not use const variables before initialization.It will give reference error if we use before initalizing.


JavaScript Operators :
----------------------
There are different types of JavaScript operators:
Arithmetic Operators
Assignment Operators
Comparison Operators
String Operators
Logical Operators
Bitwise Operators
Ternary Operators
Type Operators

Arithmatic Operators:
---------------------
Addition operator(+): to add two variable values.
Subtraction operator (-): to subtract two variable values.
multiplication operator (*): to multiply two variable values.
division operator (/): to perform division of two variable values.
modulus operator(%): The modulus operator (%) returns the division remainder.
exponential operator(**): It will perform exponent of given variable.

JavaScript Assignment Operators :
----------------------------------
Operator	Example	       Same As
=	         x = y	         x = y
+=	         x += y	         x = x + y
-=	         x -= y	         x = x - y
*=	         x *= y	         x = x * y
/=	         x /= y        	 x = x / y
%=	         x %= y	         x = x % y
**=	         x **= y	 x = x ** y

                                                               01/14/2024:
                                                               -----------
Data Types of JavaScript :
--------------------------
In javaScript there are total 8 types of dataTypes are there:
String
Number
BigInt
Boolean
Undefine
Null
Symbol
Object.(Array, Object, Date).


Number:
-------
All javaScript numbers are stored as decimal point numbers(floating point numbers).
we can write numbers with or without decimal point.
Ex:
   x=10;
   x=10.0;

Extra small or extra large numbers also we can store by using Exponentials.
Ex:
   let y = 123e5;    // 12300000
   let z = 123e-5;   // 0.00123

NOTE:
   Most programmin languages have many number types:
   in INTEGERS:
     byte(8-bits)
     short(16-bits)
     int(32-bits)
     long(64-bits)
   in Real Numbers:
     float(32-bits)
     double(64-bits) 

BigInt:
------
In javascript all numbers are stored in 64- bit floating point format. if we want to store a big value then we can use this bigInt dataType.
Ex:
   let x = BigInt("123456789012345678901234567890");

String :
---------
String is a data type where we can store data in between double or single quotes.
Ex: 
   let x;
   x = "mohan";
   x = 'mohan';
we can use Quotes inside also but it shouldn't match with outside Quotes.
Ex:
  x="mohan is working for 'GalaxE Solutions'";

In JavaScript  variable is of dynamic data type.it can store any kind of data.So we need to be careful while assigning a value to it.
Ex-1:
x=10 + 10;
result = 20 (datatype = number )
x=10 + "Krishna";
result = "10Krishna"; (datatype = String )

NOTE :
------
if we perform addition operation of a Number and String will results a String.

Boolean:
--------
Boolean will have only two values "true" or "false". Booleans are often used in conditional testing.

Ex:
   let x = 5;
   let y = 5;
   let z = 6;
   x == y;  (result will be true)
   x == z;  (result will be false)

JavaScript Arrays:
------------------
Arrays are written in square brackets"[]".In Array we can store different items under same variable with the help of indexes.
Ex: 
  const arrayName=[1, 2, "mohan", "krishna"];

JavaScript Objects :
--------------------
In Objects data is stored in curly braces"{}" in name-Value pair format.each pair is seperated by comma(,).
Ex:
  const objectName={
      name:"Mohan",
      age: 25      
  }


typeOf Operator :
-----------------
typeOf operator is helpful to find the data type of a variable or an Expression.
Ex:
   typeof ""             // Returns "string"
   typeof "John"         // Returns "string"
   typeof "John Doe"     // Returns "string"
   typeof 0              // Returns "number"
   typeof 314            // Returns "number"
   typeof 3.14           // Returns "number"
   typeof (3)            // Returns "number"
   typeof (3 + 4)        // Returns "number"

Undefine :
----------
    In JavaScript a variable without initalization or variable whose value is undefined will also be the typeOf undefine
  Ex: 
    let car; //type is undefine

    Any variable can be emptied, by setting the value to undefined. The type will also be undefined.
  Ex:
    car = undefined;  //type is undefine

JavaScript FUNCTIONS :
----------------------
Function is a block of code which will be executed when something invokes it.we will see syntax of function in below example.
A JavaScript function is defined with the function keyword, followed by a name, followed by parentheses ().
Function names can contain letters, digits, underscores, and dollar signs (same rules as variables).
The parentheses may include parameter names separated by commas:
(parameter1, parameter2, ...)
The code to be executed, by the function, is placed inside curly brackets: {}

Ex-1 :
    function functionName(){
    statement-1
    statement-2
       '
       '
    statement-n  
    }

Ex-2 :
   function name(parameter1, parameter2, parameter3) {
      // code to be executed
   }

Function parameters are listed inside the parentheses () in the function definition.
Function arguments are the values received by the function when it is invoked.
Inside the function, the arguments (the parameters) behave as local variables.


Function Return :
-----------------
when JavaScript reaches return keyword it will stop executing function.
JavaScript often compute return statement and it will returns value back where function is invoked.

Accessing a function with incorrect parameters can return an incorrect answer.
Accessing a function without () returns the function and not the function result.
Ex:
   function toCelsius(fahrenheit) {
      return (5/9) * (fahrenheit-32);
   }

   let value = toCelsius;

NOTE :
------
As you see from the examples above, toCelsius refers to the function object, and toCelsius() refers to the function result.

Functions used as Variable Values:
----------------------------------
we can also use functions as variable values.
Ex:
   function percent(aquiredMarks,totalMarks){
   percentage=(aquiredMarks/totalMarks)*100;
    return percentage;
   }
  let percentage= "Your percentage is "+percent(aquiredMarks,totalMarks);
  

JavaScript Object:
------------------
In real life, a car is an object. A car has properties like weight and color, and methods like start and stop.
Objects are variables too. But objects can contain many values. It is a common practice to declare objects with the const keyword.
Ex:
  const car = {type:"Fiat", model:"500", color:"white"};
Object Properties:
------------------
The name:values pairs in JavaScript objects are called properties.
Ex: 
const person = {
  firstName: "John",
  lastName: "Doe",
  age: 50,
  eyeColor: "blue"
};


In the above example :

Property        Property Value
--------	--------------
firstName	John
lastName	Doe
age	        50
eyeColor	blue

You can access object properties in two ways:
1.objectName.propertyName
Ex: person.lastName;

2.objectName["propertyName"]
Ex: person["lastName"];

Object Methods :
----------------
Objects can also have methods in it.
methods are stored as a properties in an object.
Ex:
const personDetails = {
firstName : "Mohan";
lastName  : "Sai";
age       :  25;
fullName  :  function(){
return this.firstName + this.lastName;
}
}

This Keyword :   
--------------
In JavaScript, the "this" keyword refers to an object."this" keyword refers to different objects depends on how it is used.In object method "this" refers to object.
Alone, "this" refers to the global object.
In function "this" refers to global object.
In a function, in strict mode, this is undefined.
In an event, this refers to the element that received the event.
Methods like call(), apply(), and bind() can refer this to any object.
In a function definition, this refers to the "owner" of the function.
In the example above, this is the person object that "owns" the fullName function.
In other words, this.firstName means the firstName property of this object.

Accessing Object Methods :
------------------------
You access an object method with the following syntax:
 objectName.methodName()

name = person.fullName();
Ex :
   <script>
     // Create an object:
     const person = {
     firstName: "John",
     lastName: "Doe",
     id: 5566,
     fullName: function() {
     return this.firstName + " " + this.lastName;
     }
   };

  // Display data from the object:
  document.getElementById("demo").innerHTML = person.fullName();
  </script>

If you access a method without the () parentheses, it will return the function definition.


JavaScript Events :
-------------------
HTML events are "things" that happen to HTML elements.
When JavaScript is used in HTML pages, JavaScript can "react" on these events.

HTML Events:
-------------
An HTML event can be something the browser does, or something a user does.
Here are some examples of HTML events:
An HTML web page has finished loading
An HTML input field was changed
An HTML button was clicked
Often, when events happen, you may want to do something.
JavaScript lets you execute code when events are detected.
HTML allows event handler attributes, with JavaScript code, to be added to HTML elements.

Ex:
<button onclick="document.getElementById('demo').innerHTML = Date()">The time is?</button>

In the example above, the JavaScript code changes the content of the element with id="demo".
In the next example, the code changes the content of its own element (using this.innerHTML).

Ex:
<button onclick="this.innerHTML = Date()">The time is?</button>

Common HTML Events:
-------------------
Event	                 Description

onchange	  An HTML element has been changed
onclick	          The user clicks an HTML element
onmouseover	  The user moves the mouse over an HTML element
onmouseout	  The user moves the mouse away from an HTML element
onkeydown	  The user pushes a keyboard key
onload	          The browser has finished loading the page

                                                       01/16/2024
                                                       ----------

Strings :
---------
Strings are used to store text data. In strings data is written in between double quotes or single quotes or back-ticks (`).
Ex:
    let Name = "mohan";
    let Name = 'mohan';
   
Quotes Inside Quotes :
-----------------------
You can use quotes inside a string, as long as they don't match the quotes surrounding the string.

Ex:
   let answer1 = "It's alright";
   let answer2 = "He is called 'Johnny'";
   let answer3 = 'He is called "Johnny"';

Template Strings
Templates were introduced with ES6 (JavaScript 2016).
Templates are strings enclosed in backticks (`This is a template string`).
Templates allow single and double quotes inside a string.

Ex:
    let text = `He's often called "Johnny"`;

String Length :
---------------
we can find length of the string using it's property.
Ex:
   let Name = "Mohan";
   let lengthOfName = Name.length;
   document.write(lengthOfName);  //ans:5

Escape charecters :
-------------------
Because strings must be written within quotes, JavaScript will misunderstand this string.
let text = "We are the so-called "Vikings" from the north.";
The string will be chopped to "We are the so-called ".
To solve this problem, you can use an backslask escape character.
The backslash escape character (\) turns special characters into string characters.

Code		 Result  	Description
\'		  '		Single quote
\"		  "		Double quote
\\		  \		Backslash

Examples
\" inserts a double quote in a string:
let text = "We are the so-called \"Vikings\" from the north.";

\' inserts a single quote in a string:
let text= 'It\'s alright.';

\\ inserts a backslash in a string:
let text = "The character \\ is called backslash.";

Breaking Long Lines
For readability, programmers often like to avoid long code lines.
A safe way to break up a statement is after an operator:

Example
document.getElementById("demo").innerHTML =
"Hello Dolly!";

A safe way to break up a string is by using string addition.
document.getElementById("demo").innerHTML = "Hello " +
"Dolly!";

Template Strings
Templates were introduced with ES6 (JavaScript 2016).
Templates are strings enclosed in backticks (`This is a template string`).
Templates allow multiline strings.
Ex:
  let text =
    `The quick
    brown fox
    jumps over
    the lazy dog`;

String Object:
--------------
we can create object of a string by using new keyword.
Ex:
  let name = new String("Mohan");


Do not create Strings objects.
The new keyword complicates the code and slows down execution speed.
String objects can produce unexpected results: 

When using the == operator, x and y are equal:
<script>
let x = "John";        // x is a string
let y = new String("John");  // y is an object
document.getElementById("demo").innerHTML = (x==y);   //result is true
</script>

When using the === operator, x and y are not equal
<script>
let x = "John";        // x is a string
let y = new String("John");  // y is an object
document.getElementById("demo").innerHTML = (x===y);   //result is false
</script>


JavaScript objects cannot be compared.
(x == y) true or false?
<script>
let x = new String("John");  // x is an object
let y = new String("John");  // y is an object
document.getElementById("demo").innerHTML = (x==y);    //result is false
</script>

(x === y) true or false?
<script>
let x = new String("John");  // x is an object
let y = new String("John");  // y is an object
document.getElementById("demo").innerHTML = (x===y);    //result is false
</script>

                                                    02/15/2024
                                                   ------------
String Methods: 
---------------
                javaScript String are immutable. All JavaScript String methods will produce new Strings without altering old string.the following are the most useful Sting methods are:

i)length : this property will return the length of string.
for Ex:
      let name = "mohan";
      document.write(name.length);     //it will return the length of the name string which is 5.
  
 ii) Extracting a Charecter from a String
    There are 4 methods to extract charecters of a String. Which are mentioned below.
     1)at(position)
     2)charAt(position)
     3)charCodeAt(position)
     4)[]

these all four methods will be used to extract a charecter from given position of a string.

What is the difference between charAt() and at() ?

both are used for extracting charecters from specific position. In "at()" method we can use negative indexing. but in charAt() we can't use negative index to extract a charecter.
 
example:
let name = "MohanSaiRamanadham";
name.charAt(1);      //o
name.charCodeAt(0)   //it will return uniCode of the charecter
name.at(0)   //here we can also use negative indexing also.
name[0]
                                              02/20/2024
                                              ----------

iii)Extracting String Part  from a string
    There are three methods to extract a portion of String.
    1)slice(start Index, end index)
    2)substring(start index, end index)
    3)substr(start Index, length of string to extract)

slice(start Index, end index): 
------------------------------
This is used to extract a portion of String from starting index to ending index here ending index is excluded and index value is started from 0. if you didn't mention ending index means it will extract rest of String.

Ex:
   let name = "Mohan Sai Ramanadham";
   document.writeln(name.slice(6, 9));    //output will be "Sai"
   document.writeln(name.slice(6));       //output will be "Sai Ramanadham"
   document.writeln(name.slice(-14,-11))  // output will be "Sai"
 

substring(start Index, end index):
----------------------------------
This method is also same as slice().but here The difference is that start and end values less than 0 are treated as 0 in substring().

substr(start index , length):
-----------------------------
This method will extract a string from starting index to length of string.If you omit the second parameter, substr() will slice out the rest of the string. If the first parameter is negative, the position counts from the end of the string.


iv)Converting charecters from Upper to lower and lower to upper cases:
----------------------------------------------------------------------
1)tolowerCase() : this method will convert Uppercase Strings to Lower case Strings.
Ex:
   let name ="MOHAN";
   name.toLowerCase()           //output will be "mohan"           

2)toUpperCase() : This method will convert lower case Strings to Upper case Strings.
   let name = "mohan";
   name.toUpperCase()          //output will be "MOHAN" 

v)Adding of two Strings: 
-------------------------
We can add Strings by using concat method and also by using "+" Operator.
1)concat() :
------------ 
Ex: 
      let firstName = "Mohan Sai";
      let secondName = "Ramanadham";
      let fullName = firstName.concat(" ", secondName);         //output will be Mohan Sai Ramanadham

2) Using + operator :
--------------------
 Ex:  let firstName = "Mohan Sai";
      let secondName = "Ramanadham";
      let fullName = firstName + " " + secondName;             //output will be Mohan Sai Ramanadham

The below two line will do the same operations.
text = "Hello" + " " + "World!";
text = "Hello".concat(" ", "World!");

v) removing white spaces to  String:
------------------------------------
1).trim() : To remove extra white spaces before and after a String this trim() method is very much useful.
-----------
Ex:
    let name ="       Mohan         ";
    name.trim();                 the output will be "Mohan"

2).trimStart() :this method will also work similar to trim() but the only difference is it will remove white spaces only at the starting of String.
----------------
Ex:
    let name ="       Mohan         ";
    name.trim();                 the output will be "Mohan            "

3)trimEnd() : this method will also work similar to trim() but the only difference is it will remove only white spaces at the end of String.
------------
Ex:
    let name ="       Mohan         ";
    name.trim();                 the output will be "Mohan"

vi)JavaScript String Padding :
------------------------------
It pads a string with another string (multiple times) until it reaches a given length.

1).padStart(length, "charecter to pad") :
---------------------------------------
this method is used to pad an element before the string.
Ex:1
-----
   let a ="6";
   document.println(a.padStart(4, "x"));      //result will be "xxx6"
Ex:2
-----
   let numb = 6;                                  //This is not a String to use padStart method this variable should be a String.
   let text = a.toString();
   document.writeln(b.padStart(4, "x"));


***Note:  
   ----
     let Name= "Mohan";
     name.padStart(4,x);            //result will be Mohan
Here first it will check the length of the given String here it is Name if its length is greater than the length in padStart() method


2).padEnd(length, "char to pad"):
   -----------------------------
 this will pad an element after String.

Ex :1
-----
     let a = "6";
     document.println(a.padEnd(4, "x"));     //result will be "6xxx"
Ex :2
-----
    let numb = 5;
    let text = numb.toString();
    let padded = text.padEnd(4,"0");        //result will be "5xxx"

                                                            2/21/2024
                                                            ---------
vii)repeat():
------------------
This String method is used to repeat given String for given number of times.

Syntax:
       repeat(count);
 Ex:
    let name = "Mohan";
    name.repeat(3);           //output will be "Mohan Mohan Mohan"

viii)replace():
--------------
This method will replace a specific String with another String.
Ex:
    String x ="My name is Mohan Sai";
    x.replace(Mohan,Rama);              //out put is ""My name is Rama Sai""

***NOTE:
--------
This method will replace only the first match.If you want to change at every match we need to use regular expression with /g flag set.
Ex:
   let text = "Please visit Microsoft and Microsoft!";
   let newText = text.replace("Microsoft", "W3Schools");     // output will be "Please visit W3Schools and Microsoft!"

This replace() is case sensitive.So, we should be carefull while replacing a String
Ex:
   let text = "Please visit Microsoft!";
   let newText = text.replace("MICROSOFT", "W3Schools");   //output will be "Please visit Microsoft!";

***NOTE:
--------
To replace case insensitive use /i flag with the String.  ... Regular Expressions should be written without double quotes.
Ex:
   let name = "Mohan";
   let fullName = name.replace(/MOHAN/i, "Mohan Sai");

To replace all matches, use a regular expression with a /g flag (global match):
let text = "Please visit Microsoft and Microsoft!";
let newText = text.replace(/Microsoft/g, "W3Schools");    //output will be "Please visit W3Schools and W3Schools!"

replaceAll():
-------------
This String method will replace.
 Ex:
   let text = "I love cats. Cats are very easy to love. Cats are very popular."
   text = text.replaceAll("Cats","Dogs");
   text = text.replaceAll("cats","dogs");       //output will be "I love dogs. Dogs are very easy to love. Dogs are very popular."

The replaceAll() method allows you to specify a regular expression instead of a string to be replaced.
If the parameter is a regular expression, the global flag (g) must be set, otherwise a TypeError is thrown.
Ex:
let text = "I love cats. Cats are very easy to love. Cats are very popular."
text = text.replaceAll(/Cats/g,"Dogs");
text = text.replaceAll(/cats/g,"dogs");


split():
--------
By using this method we can convert an String into Array.
Ex:
   let alphabets = "a,b,c,d,e,f,g";
   const text = alphabets.split(",");
   text[0];         //output is "a"

***NOTE : 
    text.split(",")    // Split on commas 
    text.split(" ")    // Split on spaces
    text.split("|")    // Split on pipe

                                                              2/22/24
                                                              -------

String search Methods:
----------------------
1)indexOf():
------------
This method will returns the index of given String at first occurence. If that String is not found then it will returns -1.
Ex:
   let x = "My name is Mohan Sai";
   x.indexOf("Mohan");                             // it will return 11
   x.indexOf("kumar");                             // it will return -1

2)lastIndexOf():
----------------
This method will return the index of last occurence of String and will return -1 if String not found.
Ex:
---
let text = "Please locate where 'locate' occurs!";
let index = text.lastIndexOf("locate");            //it will return 21
let index = text.lastIndexOf("John");              // it will return -1


***NOTE :
---------
This both methods will accepts second parameter also which will used as starting position for search.The lastIndexOf() methods searches backwards (from the end to the beginning), meaning: if the second parameter is 15, the search starts at position 15, and searches to the beginning of the string.
Ex:
let text = "Please locate where 'locate' occurs!";
let index = text.indexOf("locate", 15);            //it will return 21
let index_1 = text.lastIndexOf("locate",15);       //it will return 7

3)search(parameter):
-----------
This method is also used to find a String or regular Expression in a String and return the positionif finds.
 Ex:
let text = "Please locate where 'locate' occurs!";
text.search("locate");                                 //output will be 7

***NOTE:
--------
search() method doesn't have second parameter to start search from position. Similarly indexOf() method cant search by using regular Expressions

4)match(parameter):
----------
This method will returns an array with results after finding a required String(String which you want to find) or regular expression in a give String(the string in which you are finding).
Ex:
---
let text = "The rain in SPAIN stays mainly in the plain";
text.match("ain");                   // it will return when it matches at first occurence
text.match(/ain/);                  //this is using regular expression
text.match(/ain/g);                 //this will search globally, means it will check how many matches are there in given String
text.match(/ain/gi);                //this is to searc globally, it will also returns case in-sensitive matches also)


matchAll(parameter):
----------
The matchAll() method returns an iterator containing the results of matching a string against a string (or a regular expression).
Ex:
---
let text = "I love cats. Cats are very easy to love. Cats are very popular."
const iterator = text.matchAll("Cats");      //output is "Cats,Cats"
   
If parameter is a regular expression then we must use /g at the end of Expression otherwise it will throw a typeError
Ex:
---
let text = "I love cats. Cats are very easy to love. Cats are very popular."
const iterator = text.matchAll(/cats/g);
const iterator = text.matchAll(/cats/gi);

includes(parameter):
-----------
This method will return true if required String is found otherwise it will return false.
Ex:
---
let text = "Hello world, welcome to the universe.";
text.includes("world");                             //true
text.includes("Mohan");                             //false

we can also pass second parameter as starting position.
Ex:
---
let text = "Hello world, welcome to the universe.";
text.includes("world", 12);                           //false

startsWith(parameter):
-------------
this method will check given String is Started with given parameter or not if yes it will return true otherwise false.
Ex:
---
let text = "Hello world, welcome to the universe.";
text.startsWith("Hello");                           //true
text.startsWith("world")                            //false

let text = "Hello world, welcome to the universe.";
text.startsWith("world", 5)                         //false
text.startsWith("world", 5)                         //true


endsWith(parameter):
-----------
this method will retuern true if String will ends with given parameter otherwise it will return false.
let text = "John Doe";
text.endsWith("Doe");               //true

let text = "Hello world, welcome to the universe.";
text.endsWith("world", 11);              //true


                                          String Templates
                                          ----------------
String templates uses  back-ticks instead of Quotes.
Ex:
---
   let name = `Mohan Sai`;

we can use quotes in String Templates
Ex:
---
   let x = `my name is "Mohan" and i completed my degree at 'mvr colege'`;

String templates can allow to write a String in multiple lines`;
Ex:
---
   let text =
             `The quick
             brown fox
            jumps over
            the lazy dog`;

Interpolation:
--------------
Template String provide an easy way to interpolate variables and expressions into strings.
The method is called string interpolation.
syntax:
-------
       ${...}

Variable substitution:
---------------------
String templates allow to use variables in Strings.
Ex:
  let firstName = "Mohan";
  let secondName = "Sai";
  let fullName = `full name is "${firstName} ${secondName}"`;

Automatic replacing of variables with real values is called string interpolation.

Expression Substitution:
------------------------
Template Strings allow expressions in strings:
Ex:
---
let price = 10;
let VAT = 0.25;
let total = `Total: ${(price * (1 + VAT)).toFixed(2)}`;

Ex:
---

<!DOCTYPE html>
<html>
<body>
<h1>JavaScript Template Strings</h1>
<p>Templates allow variables in strings:</p>
<p id="demo"></p>
<p>Templates are not supported in Internet Explorer.</p>
<script>
let header = "Template Strings";
let tags = ["template strings", "javascript", "es6"];
let html = `<h2>${header}</h2><ul>`;
for (const x of tags) {
  html += `<li>${x}</li>`;
}
html += `</ul>`;
document.getElementById("demo").innerHTML = html;
</script>
</body>
</html>

                                                        02/23/2024
                                                        ----------

                                                    JavaScript Numbers
                                                    -------------------
JavaScript has only one type of number which will be written with or without decimal point.
Ex:
---
let x= 3;          //number without decimal point
let y= 3.14;       //number with decimal point
let largeNumber = 10e5    //large numbers will be written as exponential form
let smallNumber = 10e-5   // small number will be written as exponential form

Integer Precision:
------------------
Integers (numbers without a period or exponent notation) are accurate up to 15 digits.
Ex:
---
let x = 999999999999999;   // x will be 999999999999999
let y = 9999999999999999;  // y will be 10000000000000000

Floating Precision:
The maximum number of decimals is 17.
Ex:
---
0.2 + 0.1 = 0.30000000000000004

To solve the problem above, it helps to multiply and divide:

let x = (0.2 * 10 + 0.1 * 10) / 10;

Numeric Strings:
----------------
JavaScript strings can have numeric content:
let x = 100;         // x is a number
let y = "100";       // y is a string

JavaScript will try to convert strings to numbers in all numeric operations other than + operator:
Ex:
---
let x = "100";
let y = "10";
let z = x / y;    //output will be 10
let a = x * y;     // output will be 1000
let b = x - y;    //output will be 90
let c = x + y;      //output will be 10010
 
NaN:
---
NaN stands for not a number. if we are trying to perform any arithmatic operations with non numeric strings then it will returns NaN.
Ex:
let x = 10/"apple";          //it will return NaN

isNaN() method is used to check is it not a number or not.
let x = 100 / "Apple";
isNaN(x);             //true

Watch out for NaN. If you use NaN in a mathematical operation, the result will also be NaN:
let x = NaN;
let y = 5;
let z = x + y;       //output will be NaN

let x = NaN;
let y = "5";
let z = x + y;        //output will be NaN5

NaN is a number: typeof NaN returns number:
typeof NaN;          //number


Infinity
Infinity (or -Infinity) is the value JavaScript will return if you calculate a number outside the largest possible number.

Division by 0 (zero) also generates Infinity:
Ex:
----
let x =  2 / 0;
let y = -2 / 0;

Infinity is a number: typeof Infinity returns number.
typeof Infinity;            //number


Hexadecimal:
-----------
JavaScript interprets numeric constants as hexadecimal if they are preceded by 0x.
Never write a number with a leading zero (like 07).
Some JavaScript versions interpret numbers as octal if they are written with a leading zero.
By default, JavaScript displays numbers as base 10 decimals.
But you can use the toString() method to output numbers from base 2 to base 36.
Hexadecimal is base 16. Decimal is base 10. Octal is base 8. Binary is base 2.
Ex:
---
Hexatrigesimal (base 36): w
Duotrigesimal (base 32): 10
Hexadecimal (base 16): 20
Duodecimal (base 12): 28
Decimal (base 10): 32
Octal (base 8): 40
Binary (base 2): 100000


                                         Number Methods
                                         --------------
1)toString():
------------- 
this method is used to return number as String
Ex:
---
let x= 10;
x.toString()         //10 type is String
(10).toString()      //10 type is String
(5+5).toString()     //10 type is String


2)toExponential():
-----------------
This method will return String by rounding off a number and written in exponential form.Parameter will define how many digits behind decimal point.The parameter is optional. If you don't specify it, JavaScript will not round the number.
Ex:
----
let x = 8.23456;
x.toExponential();      //8.23456e+0
x.toExponential(2);      //8.24e+0
x.toExponential(4);      //8.2346e+0
x.toExponential(6);      //8.234560e+0


3)toFixed():
------------
This method will return a string by rounding off given number. arameter will define how many digits behind decimal point.
let x = 8.23456;
x.toFixed(0);             //8.23456
x.toFixed(2);             //8.23
x.toFixed(4);             //8.2346
x.toFixed(6);             //8.234560

4)toPrecision()
Ex:
---
let x = 9.65345676;
  x.toPrecision()          //9.65345676
  x.toPrecision(2)         //9.7
  x.toPrecision(4)         // 9.653
  x.toPrecision(6);        //9.65346


 valueOf():
-----------
This method will return number as number
Ex:
---
let x = 123;
x.valueOf();                //123
(123).valueOf();            //123
(100 + 23).valueOf();       //123

Converting Variables to numbers:
--------------------------------
There are few methods which can convert a variable to a number
1).Number()
2).parseInt()
3).parseFloat()



Number():
--------
we can use this method to convert a variable to Number.If the number cannot be converted, NaN (Not a Number) is returned.
Ex:
---
let x = "10";
  Number(x);         //10 and type is Number
  Number(true)            //1
  Number(false)           //0
  Number("10")            //10
  Number("  10")          //10
  Number("10  ")          //10
  Number(" 10  ")         //10
  Number("10.33")         //10.33
  Number("10,33")         //NaN
  Number("10 33")         //NaN
  Number("John");         //NaN


parseInt():
-----------
parseInt() parses a string and returns a whole number. Spaces are allowed. Only the first number is returned:
Ex:
---
parseInt("-10");              //-10
parseInt("-10.33");           //-10
parseInt("10");               //10
parseInt("10.33");            //10
parseInt("10 20 30");         //10
parseInt("10 years");         //10
parseInt("years 10");         //NaN

parseFloat():
-------------
parseFloat() parses a string and returns a number. Spaces are allowed. Only the first number is returned:
Ex:
---
parseFloat("10");              //10
parseFloat("10.33");           //10.33
parseFloat("10 20 30");        //10
parseFloat("10 years");        //10
parseFloat("years 10");        //NaN


Number Object Methods:
---------------------
These object methods belong to the Number object:

Number.isInteger()	Returns true if the argument is an integer
Number.isSafeInteger()	Returns true if the argument is a safe integer
Number.parseFloat()	Converts a string to a number
Number.parseInt()	Converts a string to a whole number


                                                        3/06/2024
                                                        ---------


                                                    JavaScript Arrays
                                                    -----------------
Array:
------

Array is a special type of variable which is used to store multiple values.We need to initialize array when creating it.

Ex:
---
    const myArray;           //will give error
    const myArray = [1,2,3,4,5,6];

We can also create an array first and we can assign values later also
Ex:
---
       const myArray = [];
       myArray[0] = 1;
       myArray[1] = 2;

we can also create an array using new keyword.
Ex:
---
        const myArray = new Array(1,2,3,4,5,6);


using new keyword will increase complexity.


Note:
   "const myArr1 = [4];"   is not equals to  "const myArr1 = new Array(4);"

We can change array elements whenever we want
Ex:
---
  const myArray = [1,2,3,4,5,6];
  myArray[0] = 7;
  myArray;                // result will be 7,2,3,4,5,6

Note:
-----
       We can store objects, Arrays and also functions in as a array elements.

Properties :
-------------

length property:
----------------
this is used to know the size of an array.
 const myArray = [1,2,3,4,5,6];
 myArray.length                           //6

push property:
--------------
this property is used to add an element at the end of an array.
Ex:
---
 const myArray = [1,2,3,4,5,6];
 myArray.push(7);
 myArray;                       //1,2,3,4,5,6,7


we can also add new item to an array using length property.
Ex:
----
   const myArray = [1,2,3,4,5,6];
   myArray[myArray.lenth] = 7;
   myArray;                              //1,2,3,4,5,6,7


OBJECTS:
--------
Objects also used to store multiple values.
Ex:
---
const myObj = {
                 name : "Mohan",
                 age : 23
              }

Object and Arrays are used to store multiple. But the difference is arrays use numbered index whereas objects use named indexes.data type of both array and object is same.to over come this problem we can use an array method which is "isArray()".


Ex:
---
     const myArray = [1,2,3,4,5,6];
     Array.isArray(myArray);                 //true


                                                          ARRAY METHODS
                                                          -------------


length:
-------
this property is used to know the length of an array 
Ex:
---
    const myArray = [1,2,3,4,5,6];
    myArray.length;                         //6

toString() :
------------
 this method is used to convert an array to a string 
Ex:
---
     const myArray = [1,2,3,4,5,6];
     myArray.toString();                     //1,2,3,4,5,6

at():
----
this method is used to get the element in a given index
Ex:
---
       const myArray = [1,2,3,4,5,6];
       myArray.at(3);                    //4  
join():
------- 
this method is used to join array elements.
Ex:
---
   const myArray = [1,2,3,4,5,6];
   myArray.join("#");                     //1#2#3#4#5#6

push():
------
this method is used to add a new element to an array at the end.
Ex:
---
   const myArray = [1,2,3,4,5,6];
   myArray.push(7);                  //1,2,3,4,5,6,7

pop():
------
this method is used to remove an element from last position of an array.

      