                                                        01/08/2024:
                                                        -----------
-->We can change HTML elements by using JavaScript.for that we need to use one method which is "document.getElementById()"
for Ex:
        document.getElementById("demo").innerHTML = "Hello JavaScript";
here in the above last example we r finding the HTML element which is having id "demo" by using "document.getElementById" and by using innerHTML we r replacing HTML content in it.

-->We can use this method to
    1.to Change HTML elements
    2.to change HTML attributes
    3.to change HTML CSS.
-->Where can we write this Java Script code :
Java Script code will be written in "script" Tag either in <body> or <head> or as external file also.
for Ex:
       <script> Code can be written here </script>
-->There r few advantages if we write code in external file it will seperate HTML and Code.
-->Cached JavaScript files can speed up page loads
-->if we want to use multiple JavaScript files we need to use multiple Script tags.
 for Ex:
        <script sr="source1.js"></script>
        <scipt src="source2.js"></script>

Java Script Display Output methods :
------------------------------------
-->In JavaScript there r few methods to display output.They are :
      a. Writing into an HTML element, using innerHTML.
      b. Writing into the HTML output using document.write().
      c. Writing into an alert box, using window.alert().
      d. Writing into the browser console, using console.log().

-->Using innerHTML:
   To access an HTML element, JavaScript can use the document.getElementById(id) method.
   The id attribute defines the HTML element. The innerHTML property defines the HTML content to be changed.
   For Ex: document.getElementById("demo").innerHTML = "Hello JavaScript";

-->JavaScript Can Change HTML Attribute Values.

Where to write JavaScript :
---------------------------
               Javascript code is written in between script tags i.e.., <script>. We can write this script tag either in body or in head.we can also create an external file for this javascript code and we can call it in ou HTML code. we can write any nuber of scripts in a HTML document.
  Ex:
     <script>
            document.getElementById("demo").innerHTML = "My First JavaScript";
     </script>

                                                                 01/11/2024:
                                                                 -----------

JavaScript Functions and Events :
---------------------------------
JavaScript function is a block of code it will be executed when it is called by an events like click and dblclick etc..,.
Ex:
  <button type="button" onclick="myFunction()">Try it</button>

<script>
       function myFunction() {
       document.getElementById("demo").innerHTML = "Paragraph changed.";
       }
</script>

NOTE: Placing scripts at the bottom of the <body> element improves the display speed, because script interpretation slows down the display.
-----

External JavaScript :
---------------------
we can write javaScript code in an external file saved with an extension of .js .we can use this external file for multiple HTML documents.to call this file in our HTML code we need to use src attribute in script tag.
 Ex:
    <button type="button" onclick="myFunction()">Try it</button>

    <p>This example links to "myScript.js".</p>
    <p>(myFunction is stored in "myScript.js")</p>

    <script src="myScript.js"></script>

JavaScript OUTPUTS:
-------------------
to display output in javaScript we can use the following:
1.Writing into an HTML element, using innerHTML.
2.Writing into the HTML output using document.write().
3.Writing into an alert box, using window.alert().
4.Writing into the browser console, using console.log().

Using document.write():
-----------------------
This is used for testing purpose.
Calling document.write() when HTML is loaded will delete whole HTML content.
ex:
   <h1>My First Web Page</h1>
   <p>My first paragraph.</p>
   <button type="button" onclick="document.write(5 + 6)">Try it</button>

Using windows.alert():
----------------------
To display output in a alert box we can use this windows.alert();
Ex:
   <h1>My First Web Page</h1>
   <p>My first paragraph.</p>

   <script>
    window.alert(5 + 6);
   </script>

In JavaScript, the window object is the global scope object. This means that variables, properties, and methods by default belong to the window object. This also means that specifying the window keyword is optional.

Using console.log():
--------------------
This method is used for debugging purpose.Output will be displayed in browser console.
Ex:
  <script>
   console.log(5 + 6);
  </script>


JavaScript Print:
------------------
JavaScript does not have any print object or print methods.

You cannot access output devices from JavaScript.

The only exception is that you can call the window.print() method in the browser to print the content of the current window.
Ex:
   <button onclick="window.print()">Print this page</button>


                ----------------------*******************************************************----------------------------------------

JavaScript Statements:
----------------------
A computer program  is a set of instructions that to be executed by the computer.
In programming these instructions are called statements.
A JavaScript program is a list of programming statements.
Ex: 
   let x, y, z;    // Statement 1
   x = 5;          // Statement 2
   y = 6;          // Statement 3
   z = x + y;      // Statement 4

Javascript programs contains number of javascript statements. These statements executed one by one in a order.

NOTE:
----
In HTML, JavaScript programs are executed by the web browser.

Semicolons(;):
--------------
These semicolons seperates statements.
in javaScript these semicolon is not mandatory.

JavaScript WhiteSpaces:
-----------------------
Javascript ignores multiple spaces.we can use any number of spaces to make our code for better understanding.
Ex:
  The following lines are equivalent:
   let person = "Hege";
   let person="Hege";

maintaining spaces around operators is good practice  ( = + - * / )
Ex:
   let x + y = z;

line length and line breaks:
----------------------------
In programming if line length is more than 80 characters it is better to break the line at operators.
Ex:
    <script>
      document.getElementById("demo").innerHTML =
      "Hello Dolly!";
    </script>

Code Blocks:
------------
if we write group of statements together in between {} is code blocks.we can see this code bloks in functions.
Ex:
   function myFunction() {
     document.getElementById("demo1").innerHTML = "Hello Dolly!";
     document.getElementById("demo2").innerHTML = "How are you?";
   } 


Javascript Keywords:
--------------------
In Javascript every statement is often starts with a keyword to define what kind of action to be performed.
There are few keyword reserved in javascript .we shouldn't use this keywords as variable name.Few of the keywords are:
   var, let, const, function, return, if, switch, for, try.

                                                 01/12/2023:
                                                 -----------

Javascript syntax:
------------------
     Syntax is a set of rules to write a code.

How to create a variable..?
ans: 
     let x;
     let y;
How to use a variable..?
ans :
      let x;
      x=5;


JavaScript Values :
-------------------
JavaScript syntax is saying that there are two types of values:
1.Fixed values are called Literals.
2.Variable values are called Variables.

JavaScript Literals:
--------------------
Two most important rules for Literals are:
1.Numbers should be with or without decimal point.
Ex:
    let x, y;
    x = 10;
    y = 10.5;

2.Sring should be written in single or double quotes.
    let name;
    name = "mohan";
    name = 'mohan';

JavaScript Variables:
---------------------
These variables are used to store values of a data.
In JavaScript var, let, const are used to declare variables.

JavaScript Operators:
---------------------
JavaScript uses arithmetic operators ( + - * / ) to compute values.
Assignment(=) operator is used to assign values.

JavaScript Expressions:
------------------------
An expression is a combination of values, variables, and operators, which computes to a value.
The computation is called an evaluation.
For Ex:
       5 * 10 evaluates to 50:

JavaScript Keywords:
--------------------
These Keywords will tell what operation to be performed.
let and var are the key words will be used to create variable.

JavaScript Comments:
--------------------
Not all JavaScript statements are "executed".
Code after double slashes // or between /* and */ is treated as a comment.
Comments are ignored, and will not be executed:

JavaScript Identifiers:
--------------------
Identifiers are the names of variables, keywords and functions.
We need to follow few rules while writing this Identifiers.They are:
It should begin with either alphabets[A-Z or a-z] or underScore or "$".
Nubmbers are not allowed to begin a identifier.
We shouldn't use keyWords as Identifiers.
JavaScript is case sensitive.

JavaScript and Camel Case:
--------------------------
There are different ways to write a variable name.If that name is containing two word we need to joint those.for Joining some will use Underscore and some will use hyphen.
but actually we shouldn't use Hyphen(-) in Javascript Identifiers.
for Ex:
    first-name, last-name, master-card, inter-city.

NOTE: Hyphens are not allowed in JavaScript. They are reserved for subtractions.
-----

Better way to write Identifiers:
1.Underscore:
-------------
for Ex:
        first_name, last_name, master_card, inter_city.

2.Upper Camel Case (Pascal Case):
-------------------------------
for Ex:
        FirstName, LastName, MasterCard, InterCity.

3.Lower Camel Case: JavaScript programmers tend to use camel case that starts with a lowercase letter:
-------------------
for Ex:
       firstName, lastName, masterCard, interCity.

JavaScript Variables:
---------------------
Variable is a container used to store data. We can declare variables in four ways:
1.Automatically.
2.Using var keyword.
3.Using let keyword.
4.Using const keyword.

Ex:
   x =5;  (in this case x will be automatically declared when we started using it.)
   var x = 5;
   let x = 5;
   const x = 5;

NOTE:
-----
It is considered good programming practice to always declare variables before use.

"let" keyword is used when the value of variable is changing.
"const" keyword is used when the value of variable is doesn't change.
 
If a variable is declared with no value will have the value undefine.

When to Use var, let, or const?
1. Always declare variables
2. Always use const if the value should not be changed
3. Always use const if the type should not be changed (Arrays and Objects)
4. Only use let if you can't use const
5. Only use var if you MUST support old browsers.

JavaScript Data Types
JavaScript variables can hold numbers like 100 and text values like "John Doe".
In programming, text values are called text strings.
JavaScript can handle many types of data, but for now, just think of numbers and strings.
Strings are written inside double or single quotes. Numbers are written without quotes.
If you put a number in quotes, it will be treated as a text string.


JavaScript Let:
---------------
let keyword is introduced in ES6.
Variable with let keyword is block scope.
Variables with let keyword should declare before it use. We can not re-declare variable in same block.
Before ES6 there is no block scope variables in JavaScript. JavaScript had Global Scope and Function Scope.
ES6 introduced the two new JavaScript keywords: let and const which are block scoped.

Variables declare with var is of global scope and it can not have block scope.

Variables declared with var inside a { } block can be accessed from outside the block:
Ex:
   {
     var x = 2;
   }
   // x CAN be used here


Variable declared with "let" can not be re-declared. But Variable declared with "var" can be re-declared.
 Ex: 
   We can not do this.
    let x = "John Doe";
    let x = 0;

   We can do this :
   var x = "John Doe";
   var x = 0;

What is Good?
let and const have block scope.
let and const can not be redeclared.
let and const must be declared before use.
let and const does not bind to this.
let and const are not hoisted.

JavaScript Const:
-----------------
Variables decalared by Const will have fixed value with block scope.
This variables should declare first before using it.
We can not re-declare variables in the same block and also we can not re-assign the variable.
Ex:
  we should not re-assign the variable.
  const PI = 3.141592653589793;
  PI = 3.14;

NOTE:
-----
    JavaScript const variables must be assigned a value when they are declared.
Ex:
    const PI = 3.14159265359;


When to use "const":
--------------------
when we know the value of a variable which is not going to change we can use this const to declare a variable.
we can use this const for declaring:
 an array,
 an object,
 a function,
 a regExp.

Constant Objects and Arrays:
----------------------------
It does not define a constant value. It defines a constant reference to a value.
because of this we can NOT:
  Reassign a constant value.
  
 Reassign a constant array.
Ex:
   const cars = ["Saab", "Volvo", "BMW"];
   cars = ["Toyota", "Volvo", "Audi"];    // ERROR

Reassign a constant object.
Ex: 
  const car = {type:"Fiat", model:"500", color:"white"};
  car = {type:"Volvo", model:"EX60", color:"red"};    // ERROR

But you CAN:
  Change the elements of constant array.
Ex:
  // You can create a constant array:
       const cars = ["Saab", "Volvo", "BMW"];
  // You can change an element:
       cars[0] = "Toyota";
  // You can add an element:
       cars.push("Audi");

Change the properties of constant object.
Ex:
   // You can create a const object:
const car = {type:"Fiat", model:"500", color:"white"};
   // You can change a property:
car.color = "red";
   // You can add a property:
car.owner = "Johnson";


Hoisting :
variables defined with "var" are hoisted to the top and can be initialized at anytime.means we can use this variables before it's declaration.
Ex:
 x=10;
 var x;

Variables defined using "const" are hoisted top but not initialized.means we can not use const variables before initialization.It will give reference error if we use before initalizing.


JavaScript Operators :
----------------------
There are different types of JavaScript operators:
Arithmetic Operators
Assignment Operators
Comparison Operators
String Operators
Logical Operators
Bitwise Operators
Ternary Operators
Type Operators

Arithmatic Operators:
---------------------
Addition operator(+): to add two variable values.
Subtraction operator (-): to subtract two variable values.
multiplication operator (*): to multiply two variable values.
division operator (/): to perform division of two variable values.
modulus operator(%): The modulus operator (%) returns the division remainder.
exponential operator(**): It will perform exponent of given variable.

JavaScript Assignment Operators :
----------------------------------
Operator	Example	       Same As
=	         x = y	         x = y
+=	         x += y	         x = x + y
-=	         x -= y	         x = x - y
*=	         x *= y	         x = x * y
/=	         x /= y        	 x = x / y
%=	         x %= y	         x = x % y
**=	         x **= y	 x = x ** y

                                                               01/14/2024:
                                                               -----------
Data Types of JavaScript :
--------------------------
In javaScript there are total 8 types of dataTypes are there:
String
Number
BigInt
Boolean
Undefine
Null
Symbol
Object.(Array, Object, Date).


Number:
-------
All javaScript numbers are stored as decimal point numbers(floating point numbers).
we can write numbers with or without decimal point.
Ex:
   x=10;
   x=10.0;

Extra small or extra large numbers also we can store by using Exponentials.
Ex:
   let y = 123e5;    // 12300000
   let z = 123e-5;   // 0.00123

NOTE:
   Most programmin languages have many number types:
   in INTEGERS:
     byte(8-bits)
     short(16-bits)
     int(32-bits)
     long(64-bits)
   in Real Numbers:
     float(32-bits)
     double(64-bits) 

BigInt:
------
In javascript all numbers are stored in 64- bit floating point format. if we want to store a big value then we can use this bigInt dataType.
Ex:
   let x = BigInt("123456789012345678901234567890");

String :
---------
String is a data type where we can store data in between double or single quotes.
Ex: 
   let x;
   x = "mohan";
   x = 'mohan';
we can use Quotes inside also but it shouldn't match with outside Quotes.
Ex:
  x="mohan is working for 'GalaxE Solutions'";

In JavaScript  variable is of dynamic data type.it can store any kind of data.So we need to be careful while assigning a value to it.
Ex-1:
x=10 + 10;
result = 20 (datatype = number )
x=10 + "Krishna";
result = "10Krishna"; (datatype = String )

NOTE :
------
if we perform addition operation of a Number and String will results a String.

Boolean:
--------
Boolean will have only two values "true" or "false". Booleans are often used in conditional testing.

Ex:
   let x = 5;
   let y = 5;
   let z = 6;
   x == y;  (result will be true)
   x == z;  (result will be false)

JavaScript Arrays:
------------------
Arrays are written in square brackets"[]".In Array we can store different items under same variable with the help of indexes.
Ex: 
  const arrayName=[1, 2, "mohan", "krishna"];

JavaScript Objects :
--------------------
In Objects data is stored in curly braces"{}" in name-Value pair format.each pair is seperated by comma(,).
Ex:
  const objectName={
      name:"Mohan",
      age: 25      
  }


typeOf Operator :
-----------------
typeOf operator is helpful to find the data type of a variable or an Expression.
Ex:
   typeof ""             // Returns "string"
   typeof "John"         // Returns "string"
   typeof "John Doe"     // Returns "string"
   typeof 0              // Returns "number"
   typeof 314            // Returns "number"
   typeof 3.14           // Returns "number"
   typeof (3)            // Returns "number"
   typeof (3 + 4)        // Returns "number"

Undefine :
----------
    In JavaScript a variable without initalization or variable whose value is undefined will also be the typeOf undefine
  Ex: 
    let car; //type is undefine

    Any variable can be emptied, by setting the value to undefined. The type will also be undefined.
  Ex:
    car = undefined;  //type is undefine